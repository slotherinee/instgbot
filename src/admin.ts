import TelegramBot from "node-telegram-bot-api";
import {
  getPlatformStats,
  getRecentErrors,
  getStats,
  getTopUsers,
  getUsers,
  recordError,
  splitMessage
} from "./database";
import { ADMIN_USER_IDS, isAdmin } from "./utils";

export const sendErrorToAdmin = async (
  bot: TelegramBot,
  error: any,
  context: string,
  userMessage?: string,
  chatId?: number,
  username?: string
) => {
  // Record error in database if we have user context
  if (chatId) {
    try {
      const errorMessage = typeof error === "object" && error !== null ?(error.message || JSON.stringify(error)) :String(error);
      recordError(chatId, context, errorMessage, userMessage, username);
    }
    catch (dbError) {
      console.error("Failed to record error in database:", dbError);
    }
  }

  const contextMessages: { [key: string]: string } = {
    "youtube download": "üé• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ YouTube Shorts",
    "youtube video send": "üì§ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ YouTube –≤–∏–¥–µ–æ",
    "youtube mp4 check": "üîç YouTube –Ω–µ –≤–µ—Ä–Ω—É–ª —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ",
    "snapsave download": "üì± –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑ —Å–æ—Ü—Å–µ—Ç–µ–π",
    "media check": "üìÅ –ù–µ –Ω–∞–π–¥–µ–Ω—ã –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –≤ –æ—Ç–≤–µ—Ç–µ",
    "single video": "üé¨ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ",
    "single photo": "üì∏ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ",
    "sendMediaGroup videos": "üé•üì¶ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä—É–ø–ø—ã –≤–∏–¥–µ–æ",
    "sendMediaGroup photos": "üì∏üì¶ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä—É–ø–ø—ã —Ñ–æ—Ç–æ",
    "delete loading message": "üóëÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ '–ó–∞–≥—Ä—É–∂–∞—é...'",
    "main message handler": "‚öôÔ∏è –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
    "main function": "üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞"
  };

  const contextTitle = contextMessages[context] || `‚ùå –û—à–∏–±–∫–∞: ${context}`;

  let errorDetails = "";
  if (typeof error === "object" && error !== null) {
    if (error.message) {
      errorDetails = error.message;
    }
    else if (error.error) {
      errorDetails = JSON.stringify(error.error, null, 2);
    }
    else {
      errorDetails = JSON.stringify(error, null, 2);
    }
  }
  else {
    errorDetails = String(error);
  }

  const userInfo = chatId ?`üö® –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username ? `@${username}` : `ID: ${chatId}`} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞${userMessage ? ` –ø—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏ "${userMessage}"` : ""}` :"üö® –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞";

  const errorMessage = [
    userInfo,
    "",
    contextTitle,
    "",
    "üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:",
    errorDetails,
    "",
    ...(chatId ? [`üë§ Chat ID: ${chatId}`, ""] : []),
    `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString("ru-RU")}`
  ].join("\n");

  // Send error to all admin users
  for (const adminId of ADMIN_USER_IDS) {
    try {
      await bot.sendMessage(adminId, errorMessage);
    }
    catch (e) {
      console.warn(`Failed to send error to admin ${adminId}:`, e);
    }
  }
};

// Admin commands handler
export const handleAdminCommands = async (
  bot: TelegramBot,
  chatId: number,
  message: string,
  userId?: number
): Promise<boolean> => {
  if (!isAdmin(userId)) return false;

  const [command, ...args] = message.split(" ");

  switch (command.toLowerCase()) {
    case "/users":
      await handleUsersCommand(bot, chatId, args);
      return true;
    case "/stats":
      await handleStatsCommand(bot, chatId);
      return true;
    case "/top":
      await handleTopUsersCommand(bot, chatId, args);
      return true;
    case "/errors":
      await handleErrorsCommand(bot, chatId, args);
      return true;
    case "/platforms":
      await handlePlatformsCommand(bot, chatId);
      return true;
    case "/adminhelp":
      await handleAdminHelpCommand(bot, chatId);
      return true;
    default:
      return false;
  }
};

const handleUsersCommand = async (bot: TelegramBot, chatId: number, args: string[]) => {
  try {
    const limit = args[0] ? parseInt(args[0]) : 20;
    const users = getUsers(limit);

    if (users.length === 0) {
      await bot.sendMessage(chatId, "üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç");
      return;
    }

    let message = `üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ–∫–∞–∑–∞–Ω–æ ${users.length}):\n\n`;

    users.forEach((user, index) => {
      const username = user.username ? `@${user.username}` : user.first_name || "–ë–µ–∑ –∏–º–µ–Ω–∏";
      const lastActivity = new Date(user.last_activity).toLocaleString("ru-RU");

      message += `${index + 1}. ${username}\n`;
      message += `   üìä –°–∫–∞—á–∏–≤–∞–Ω–∏—è: ${user.download_count}\n`;
      message += `   ‚ùå –û—à–∏–±–∫–∏: ${user.error_count}\n`;
      message += `   üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${lastActivity}\n`;
      message += `   üÜî ID: ${user.chat_id}\n\n`;
    });

    const chunks = splitMessage(message);

    for (const chunk of chunks) {
      await bot.sendMessage(chatId, chunk);
    }
  }
  catch (error) {
    await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error}`);
  }
};

const handleStatsCommand = async (bot: TelegramBot, chatId: number) => {
  try {
    const stats = getStats();

    const message = [
      "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:",
      "",
      `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}`,
      `üì± –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: ${stats.activeUsers24h}`,
      `‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å–∫–∞—á–∏–≤–∞–Ω–∏–π: ${stats.totalDownloads}`,
      `‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: ${stats.totalErrors}`,
      "",
      `‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString("ru-RU")}`
    ].join("\n");

    await bot.sendMessage(chatId, message);
  }
  catch (error) {
    await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error}`);
  }
};

const handleTopUsersCommand = async (bot: TelegramBot, chatId: number, args: string[]) => {
  try {
    const limit = args[0] ? parseInt(args[0]) : 10;
    const topUsers = getTopUsers(limit);

    if (topUsers.length === 0) {
      await bot.sendMessage(chatId, "üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç");
      return;
    }

    let message = `üèÜ –¢–û–ü-${topUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è–º:\n\n`;

    topUsers.forEach((user, index) => {
      const username = user.username ? `@${user.username}` : user.first_name || "–ë–µ–∑ –∏–º–µ–Ω–∏";
      const medal = index === 0 ? "ü•á" : index === 1 ? "ü•à" : index === 2 ? "ü•â" : `${index + 1}.`;

      message += `${medal} ${username}\n`;
      message += `   üìä ${user.download_count} —Å–∫–∞—á–∏–≤–∞–Ω–∏–π\n`;
      message += `   üÜî ID: ${user.chat_id}\n\n`;
    });

    const chunks = splitMessage(message);

    for (const chunk of chunks) {
      await bot.sendMessage(chatId, chunk);
    }
  }
  catch (error) {
    await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞: ${error}`);
  }
};

const handleErrorsCommand = async (bot: TelegramBot, chatId: number, args: string[]) => {
  try {
    const limit = args[0] ? parseInt(args[0]) : 5;
    const errors = getRecentErrors(limit);

    if (errors.length === 0) {
      await bot.sendMessage(chatId, "‚úÖ –ù–µ–¥–∞–≤–Ω–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ—Ç");
      return;
    }

    let message = `üö® –ü–æ—Å–ª–µ–¥–Ω–∏–µ ${errors.length} –æ—à–∏–±–æ–∫:\n\n`;

    errors.forEach((error, index) => {
      const username = error.username ? `@${error.username}` : error.first_name || "–ë–µ–∑ –∏–º–µ–Ω–∏";
      const timestamp = new Date(error.timestamp).toLocaleString("ru-RU");

      message += `${index + 1}. ${username} (ID: ${error.chat_id})\n`;
      message += `   üè∑Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç: ${error.error_context}\n`;
      message += `   üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.original_message || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n`;
      message += `   ‚ö†Ô∏è –û—à–∏–±–∫–∞: ${error.error_message.substring(0, 100)}${error.error_message.length > 100 ? "..." : ""}\n`;
      message += `   üïê –í—Ä–µ–º—è: ${timestamp}\n\n`;
    });

    const chunks = splitMessage(message);

    for (const chunk of chunks) {
      await bot.sendMessage(chatId, chunk);
    }
  }
  catch (error) {
    await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫: ${error}`);
  }
};

const handlePlatformsCommand = async (bot: TelegramBot, chatId: number) => {
  try {
    const platforms = getPlatformStats();

    if (platforms.length === 0) {
      await bot.sendMessage(chatId, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º –ø–æ–∫–∞ –ø—É—Å—Ç–∞");
      return;
    }

    let message = "üì± –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º:\n\n";

    platforms.forEach(platform => {
      message += `üåê ${platform.platform.toUpperCase()}\n`;
      message += `   üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${platform.total_requests}\n`;
      message += `   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: ${platform.successful_downloads}\n`;
      message += `   üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${platform.success_rate}%\n\n`;
    });

    const chunks = splitMessage(message);

    for (const chunk of chunks) {
      await bot.sendMessage(chatId, chunk);
    }
  }
  catch (error) {
    await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º: ${error}`);
  }
};

const handleAdminHelpCommand = async (bot: TelegramBot, chatId: number) => {
  const message = [
    "üîß –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:",
    "",
    "üë§ /users [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
    "üìä /stats - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
    "üèÜ /top [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] - —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
    "üö® /errors [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏",
    "üì± /platforms - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º",
    "‚ùì /adminhelp - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞",
    "",
    "–ü—Ä–∏–º–µ—Ä—ã:",
    "‚Ä¢ /users 10 - –ø–æ–∫–∞–∑–∞—Ç—å 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
    "‚Ä¢ /top 5 - —Ç–æ–ø 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
    "‚Ä¢ /errors 3 - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ—à–∏–±–∫–∏"
  ].join("\n");

  await bot.sendMessage(chatId, message);
};
