import TelegramBot from "node-telegram-bot-api";
import {
  getAllUsers,
  getNewsletterStats,
  getPlatformStats,
  getRecentErrors,
  getStats,
  getTopUsers,
  getUsers,
  recordError,
  splitMessage
} from "./database";
import { ADMIN_USER_IDS, BOT_TAG, isAdmin, safeSendMessage } from "./utils";

// Admin commands handler
export const handleAdminCommands = async (
  bot: TelegramBot,
  chatId: number,
  message: string,
  userId?: number
): Promise<boolean> => {
  if (!isAdmin(userId)) return false;

  const [command, ...args] = message.split(" ");

  switch (command.toLowerCase()) {
    case "/users":
      await handleUsersCommand(bot, chatId, args);
      return true;
    case "/stats":
      await handleStatsCommand(bot, chatId);
      return true;
    case "/top":
      await handleTopUsersCommand(bot, chatId, args);
      return true;
    case "/errors":
      await handleErrorsCommand(bot, chatId, args);
      return true;
    case "/platforms":
      await handlePlatformsCommand(bot, chatId);
      return true;
    case "/announcecount":
      await handleAnnouncementCountCommand(bot, chatId);
      return true;
    case "/ah":
      await handleAdminHelpCommand(bot, chatId);
      return true;
    case "/announce":
      await handleAnnouncementCommand(bot, chatId, message);
      return true;
    default:
      return false;
  }
};

const handleUsersCommand = async (bot: TelegramBot, chatId: number, args: string[]) => {
  try {
    const limit = args[0] ? parseInt(args[0]) : 20;
    const users = getUsers(limit);

    if (users.length === 0) {
      await safeSendMessage(bot, chatId, "üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç");
      return;
    }

    let message = `üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ–∫–∞–∑–∞–Ω–æ ${users.length}):\n\n`;

    users.forEach((user, index) => {
      const username = user.username ? `@${user.username}` : user.first_name || "–ë–µ–∑ –∏–º–µ–Ω–∏";
      const lastActivity = new Date(user.last_activity).toLocaleString("ru-RU");

      message += `${index + 1}. ${username}\n`;
      message += `   üìä –°–∫–∞—á–∏–≤–∞–Ω–∏—è: ${user.download_count}\n`;
      message += `   ‚ùå –û—à–∏–±–∫–∏: ${user.error_count}\n`;
      message += `   üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${lastActivity}\n`;
      message += `   üÜî ID: ${user.chat_id}\n\n`;
    });

    const chunks = splitMessage(message);

    for (const chunk of chunks) {
      await safeSendMessage(bot, chatId, chunk);
    }
  }
  catch (error) {
    await safeSendMessage(bot, chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error}`);
  }
};

const handleStatsCommand = async (bot: TelegramBot, chatId: number) => {
  try {
    const stats = getStats();

    const message = [
      "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:",
      "",
      `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}`,
      `üì± –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: ${stats.activeUsers24h}`,
      `‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å–∫–∞—á–∏–≤–∞–Ω–∏–π: ${stats.totalDownloads}`,
      `‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: ${stats.totalErrors}`,
      "",
      `‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString("ru-RU")}`
    ].join("\n");

    await safeSendMessage(bot, chatId, message);
  }
  catch (error) {
    await safeSendMessage(bot, chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error}`);
  }
};

const handleTopUsersCommand = async (bot: TelegramBot, chatId: number, args: string[]) => {
  try {
    const limit = args[0] ? parseInt(args[0]) : 10;
    const topUsers = getTopUsers(limit);

    if (topUsers.length === 0) {
      await safeSendMessage(bot, chatId, "üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç");
      return;
    }

    let message = `üèÜ –¢–û–ü-${topUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è–º:\n\n`;

    topUsers.forEach((user, index) => {
      const username = user.username ? `@${user.username}` : user.first_name || "–ë–µ–∑ –∏–º–µ–Ω–∏";
      const medal = index === 0 ? "ü•á" : index === 1 ? "ü•à" : index === 2 ? "ü•â" : `${index + 1}.`;

      message += `${medal} ${username}\n`;
      message += `   üìä ${user.download_count} —Å–∫–∞—á–∏–≤–∞–Ω–∏–π\n`;
      message += `   üÜî ID: ${user.chat_id}\n\n`;
    });

    const chunks = splitMessage(message);

    for (const chunk of chunks) {
      await safeSendMessage(bot, chatId, chunk);
    }
  }
  catch (error) {
    await safeSendMessage(bot, chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞: ${error}`);
  }
};

const handleErrorsCommand = async (bot: TelegramBot, chatId: number, args: string[]) => {
  try {
    const limit = args[0] ? parseInt(args[0]) : 5;
    const errors = getRecentErrors(limit);

    if (errors.length === 0) {
      await safeSendMessage(bot, chatId, "‚úÖ –ù–µ–¥–∞–≤–Ω–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ—Ç");
      return;
    }

    let message = `üö® –ü–æ—Å–ª–µ–¥–Ω–∏–µ ${errors.length} –æ—à–∏–±–æ–∫:\n\n`;

    errors.forEach((error, index) => {
      const username = error.username ? `@${error.username}` : error.first_name || "–ë–µ–∑ –∏–º–µ–Ω–∏";
      const timestamp = new Date(error.timestamp).toLocaleString("ru-RU");

      message += `${index + 1}. ${username} (ID: ${error.chat_id})\n`;
      message += `   üè∑Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç: ${error.error_context}\n`;
      message += `   üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.original_message || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n`;
      message += `   ‚ö†Ô∏è –û—à–∏–±–∫–∞: ${error.error_message.substring(0, 100)}${error.error_message.length > 100 ? "..." : ""}\n`;
      message += `   üïê –í—Ä–µ–º—è: ${timestamp}\n\n`;
    });

    const chunks = splitMessage(message);

    for (const chunk of chunks) {
      await safeSendMessage(bot, chatId, chunk);
    }
  }
  catch (error) {
    await safeSendMessage(bot, chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫: ${error}`);
  }
};

const handlePlatformsCommand = async (bot: TelegramBot, chatId: number) => {
  try {
    const platforms = getPlatformStats();

    if (platforms.length === 0) {
      await safeSendMessage(bot, chatId, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º –ø–æ–∫–∞ –ø—É—Å—Ç–∞");
      return;
    }

    let message = "üì± –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º:\n\n";

    platforms.forEach(platform => {
      message += `üåê ${platform.platform.toUpperCase()}\n`;
      message += `   üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${platform.total_requests}\n`;
      message += `   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: ${platform.successful_downloads}\n`;
      message += `   üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${platform.success_rate}%\n\n`;
    });

    const chunks = splitMessage(message);

    for (const chunk of chunks) {
      await safeSendMessage(bot, chatId, chunk);
    }
  }
  catch (error) {
    await safeSendMessage(bot, chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º: ${error}`);
  }
};

const handleAnnouncementCountCommand = async (bot: TelegramBot, chatId: number) => {
  try {
    const newsletterStats = getNewsletterStats();

    const reportMessage = [
      "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É:",
      "",
      `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: ${newsletterStats.total}`,
      `üîî –ü–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É: ${newsletterStats.subscribed}`,
      `üîï –û—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏: ${newsletterStats.unsubscribed}`,
      "",
      `üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${newsletterStats.total > 0 ? Math.round((newsletterStats.subscribed / newsletterStats.total) * 100) : 0}%`,
      "",
      `‚è∞ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${new Date().toLocaleString("ru-RU")}`
    ].join("\n");

    await safeSendMessage(bot, chatId, reportMessage);
  }
  catch (error) {
    console.error("Newsletter count error:", error);
    await safeSendMessage(bot, chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫.");
  }
};

const handleAdminHelpCommand = async (bot: TelegramBot, chatId: number) => {
  const message = [
    "üîß –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:",
    "",
    "üë§ /users [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
    "üìä /stats - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
    "üèÜ /top [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] - —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
    "üö® /errors [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏",
    "üì± /platforms - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º",
    "üì¢ /announce [—Å–æ–æ–±—â–µ–Ω–∏–µ] - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
    "üìà /announceCount - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É",
    "‚ùì /ah - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞",
    "",
    "–ü—Ä–∏–º–µ—Ä—ã:",
    "‚Ä¢ /users 10 - –ø–æ–∫–∞–∑–∞—Ç—å 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
    "‚Ä¢ /top 5 - —Ç–æ–ø 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
    "‚Ä¢ /errors 3 - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ—à–∏–±–∫–∏",
    "",
    "‚ÑπÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π (/newsletter)"
  ].join("\n");

  await safeSendMessage(bot, chatId, message);
};

const handleAnnouncementCommand = async (bot: TelegramBot, chatId: number, message: string) => {
  // Extract announcement text after /announce command
  const announcementText = message.replace(/^\/announce\s*/, "").trim();

  if (!announcementText) {
    await safeSendMessage(bot, chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /announce\n\n–ü—Ä–∏–º–µ—Ä: /announce –°–µ–≥–æ–¥–Ω—è –º—ã –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é!");
    return;
  }

  // Format the announcement message
  const formattedMessage = `${announcementText}\n\nüì¢ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏: /newsletter\n\n${BOT_TAG}`;

  // Get all users from database
  const users = getAllUsers();

  if (users.length === 0) {
    await safeSendMessage(bot, chatId, "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.");
    return;
  }

  // Send confirmation to admin
  await safeSendMessage(bot, chatId, `–ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...\n\n–¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n${formattedMessage}`);

  let successCount = 0;
  let failureCount = 0;
  const failedUsers: number[] = [];

  for (const user of users) {
    try {
      const result = await safeSendMessage(bot, user.chat_id, formattedMessage, {
        disable_notification: true
      });

      if (result !== null) {
        successCount++;
      }
      else {
        failureCount++;
        failedUsers.push(user.chat_id);
      }

      await new Promise(resolve => setTimeout(resolve, 50));
    }
    catch (error) {
      failureCount++;
      failedUsers.push(user.chat_id);
      console.error(`Failed to send announcement to user ${user.chat_id}:`, error);
    }
  }

  // Send report to admin
  const newsletterStats = getNewsletterStats();
  const reportMessage = [
    "üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
    "",
    "ÔøΩ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:",
    `‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${successCount}`,
    `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å: ${failureCount}`,
    `üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º: ${users.length}`,
    "",
    "üë• –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
    `üìà –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${newsletterStats.total}`,
    `üîî –ü–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É: ${newsletterStats.subscribed}`,
    `üîï –û—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏: ${newsletterStats.unsubscribed}`,
    "",
    failureCount > 0 ? `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: ${failedUsers.slice(0, 10).join(", ")}${failedUsers.length > 10 ? ` –∏ –µ—â–µ ${failedUsers.length - 10}...` : ""}` : "üéâ –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
  ].join("\n");

  await safeSendMessage(bot, chatId, reportMessage);
};
